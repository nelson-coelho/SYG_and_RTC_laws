install.packages("MASS")
install.packages("sandwich")
install.packages("tibble")
install.packages("tidyr")
install.packages("xts")
install.packages("tidyverse")
install.packages("Hmisc")
install.packages("pastecs")
install.packages("readxl")
install.packages("knitr")
install.packages("ggplot2")
install.packages("janitor")
install.packages("doParallel")
install.packages("dplyr")
install.packages("jsonlite")
install.packages("readr")
install.packages("fixest")
install.packages(c("tidycensus", "tidyverse", "plotly"))
install.packages("psych")
install.packages("plm")
install.packages('haven')
install.packages('R.utils')
install.packages('pscl')
install.packages('lmtest')
install.packages('missForest')
install.packages('skimr')
install.packages("mice")

library(kableExtra)
library(augsynth)
library(magrittr)
library(bpCausal)
library(R.utils)
library(jsonlite)
library(haven)
library(MASS)
library(sandwich)
library(tibble)
library(tidyr)
library(xts)
library(tidyverse)
library(Hmisc)
library(pastecs)
library(readxl)
library(knitr)
library(ggplot2)
library(janitor)
library(doParallel)
library(dplyr)
library(jsonlite)
library(readr)
library(fixest)
library(tidycensus)
library(psych)
library(plm)
library(pscl)
library(lmtest)
library(missForest)
library(skimr)
library('mice')
require(ggplot2)
require(pscl)
require(MASS)
require(boot)
library(stargazer)
require(Rcpp) 
## for plotting
require(ggplot2)  
require(GGally) 
## for parallel computing 
require(foreach)  
require(future)
require(doParallel) 
require(abind) 
require(lfe)
library(gsynth)
library(panelView)
census_api_key("1536c1312955b80cf3be556bea63f3656d4303d1", install = TRUE)

# this script creates a new table from the old one then runs FENB and ZINB tests

#load kaplan's db
shr_db_JH <- read_dta('C:/Users/sarah/Desktop/lookinto/CEOE/shr_1976_2022.dta')


#removing years not used in study
shr_db_JH <- shr_db_JH %>%  filter(shr_db_JH$year<='2020')


################################
######## citizen JH ############
################################
#
# in this section we filter kaplan's database for citizen justifiable homicides (CJH)
#

#create a copy
shr_db_JH1 <- shr_db_JH


JH_db_new_cit <- shr_db_JH1 %>%  filter(shr_db_JH1$offender_1_circumstance=='felon killed by private citizen') #filter by occurrence of CJH
JH_db_new_cit_additional <- JH_db_new_cit %>%  filter(JH_db_new_cit$additional_victim_count > 0) #filter if there were additional victims
JH_db_new_cit_offender_additional <- JH_db_new_cit %>%  filter(JH_db_new_cit$additional_offender_count > 0) #filter if there were additional offenders

#doing the counts of CJH
JH_db_new_cit_ct <- JH_db_new_cit %>%
  group_by(state, year) %>%
  tally()

JH_db_new_cit_ct <- as.data.frame(JH_db_new_cit_ct) #transform into dataframe

#cleaning and adding a variable that is used to join tables later on
JH_db_new_cit_ct <- JH_db_new_cit_ct %>% unite('year_ymo', year, state, remove = FALSE)
JH_db_new_cit_additional <- JH_db_new_cit_additional %>% unite('year_ymo', year, state, remove = FALSE)
JH_db_new_cit_offender_additional <- JH_db_new_cit_offender_additional %>% unite('year_ymo', year, state, remove = FALSE)
JH_db_new_cit_additional <- subset(JH_db_new_cit_additional, select = c(additional_victim_count, year_ymo))
JH_db_new_cit_offender_additional <- subset(JH_db_new_cit_offender_additional, select = c(additional_offender_count, year_ymo))

#below join tables
JH_db_new_cit_ct <- left_join(JH_db_new_cit_ct, JH_db_new_cit_additional, by = "year_ymo")
JH_db_new_cit_ct <- left_join(JH_db_new_cit_ct, JH_db_new_cit_offender_additional, by = "year_ymo")

#below we make perform the imputation of "0" for "NA", because they are not real NAs, 
#given that Kaplan's db is a table of occurrences and our table has all periods
JH_db_new_cit_ct <- JH_db_new_cit_ct %>%
  mutate(additional_offender_count = coalesce(additional_offender_count, 0),
         additional_victim_count = coalesce(additional_victim_count, 0)
  )


#below we count the total of offenders and victims
JH_db_new_cit_ct$cit_total_victims <- (JH_db_new_cit_ct$additional_victim_count + JH_db_new_cit_ct$n)
JH_db_new_cit_ct$cit_total_offenders <- (JH_db_new_cit_ct$additional_offender_count + JH_db_new_cit_ct$n)

#simply renaming the column that is used to join tables
JH_db_new_cit_ct <- JH_db_new_cit_ct %>% rename_with( ~"BREAKln", "year_ymo")

#renaming other variables
JH_db_new_cit_ct <- JH_db_new_cit_ct %>% rename_with( ~"cit_JHs_occurrence", "n")
JH_db_new_cit_ct <- JH_db_new_cit_ct %>% rename_with( ~"cit_additional_victim_count", "additional_victim_count")
JH_db_new_cit_ct <- JH_db_new_cit_ct %>% rename_with( ~"cit_additional_offender_count", "additional_offender_count")



################################
########  police JH ############
################################
#
# in this section we filter kaplan's database for police justifiable homicides (PJH)
#

#create a copy
shr_db_JH1 <- shr_db_JH


JH_db_new_pol <- shr_db_JH1 %>%  filter(shr_db_JH1$offender_1_circumstance=='felon killed by police') #filter by occurrence of PJH
JH_db_new_pol_additional <- JH_db_new_pol %>%  filter(JH_db_new_pol$additional_victim_count > 0) #filter if there were additional victims
JH_db_new_pol_offender_additional <- JH_db_new_pol %>%  filter(JH_db_new_pol$additional_offender_count > 0) #filter if there were additional offenders


#doing the counts of PJH
JH_db_new_pol_ct <- JH_db_new_pol %>%
  group_by(state, year) %>%
  tally()


JH_db_new_pol_ct <- as.data.frame(JH_db_new_pol_ct) #transform into dataframe

#cleaning and adding a variable that is used to join tables later on
JH_db_new_pol_ct <- JH_db_new_pol_ct %>% unite('year_ymo', year, state, remove = FALSE)
JH_db_new_pol_additional <- JH_db_new_pol_additional %>% unite('year_ymo', year, state, remove = FALSE)
JH_db_new_pol_offender_additional <- JH_db_new_pol_offender_additional %>% unite('year_ymo', year, state, remove = FALSE)
JH_db_new_pol_additional <- subset(JH_db_new_pol_additional, select = c(additional_victim_count, year_ymo))
JH_db_new_pol_offender_additional <- subset(JH_db_new_pol_offender_additional, select = c(additional_offender_count, year_ymo))

#below join tables
JH_db_new_pol_ct <- left_join(JH_db_new_pol_ct, JH_db_new_pol_additional, by = "year_ymo")
JH_db_new_pol_ct <- left_join(JH_db_new_pol_ct, JH_db_new_pol_offender_additional, by = "year_ymo")

#below we make perform the imputation of "0" for "NA", because they are not real NAs, 
#given that Kaplan's db is a table of occurrences and our table has all periods
JH_db_new_pol_ct <- JH_db_new_pol_ct %>%
  mutate(additional_offender_count = coalesce(additional_offender_count, 0),
         additional_victim_count = coalesce(additional_victim_count, 0)
  )

#below we count the total of offenders and victims
JH_db_new_pol_ct$pol_total_victims <- (JH_db_new_pol_ct$additional_victim_count + JH_db_new_pol_ct$n)
JH_db_new_pol_ct$pol_total_offenders <- (JH_db_new_pol_ct$additional_offender_count + JH_db_new_pol_ct$n)

#simply renaming the column that is used to join tables
JH_db_new_pol_ct <- JH_db_new_pol_ct %>% rename_with( ~"BREAKln", "year_ymo")

#renaming other variables
JH_db_new_pol_ct <- JH_db_new_pol_ct %>% rename_with( ~"pol_JHs_occurrence", "n")
JH_db_new_pol_ct <- JH_db_new_pol_ct %>% rename_with( ~"pol_additional_victim_count", "additional_victim_count")
JH_db_new_pol_ct <- JH_db_new_pol_ct %>% rename_with( ~"pol_additional_offender_count", "additional_offender_count")



#####################################
##########   homicides ##############
#####################################
#
# in this section we filter kaplan's database for homicides
#

#create a copy
shr_db_homs_for_JH1 <- shr_db_JH

# here we filter out the occurrences of CJH and PJH
homs_db <- shr_db_homs_for_JH1 %>%  filter(!shr_db_homs_for_JH1$offender_1_circumstance=='felon killed by private citizen' & !shr_db_homs_for_JH1$offender_1_circumstance=='felon killed by police')
# next we filter out the occurrences of CJH and PJH so long as there were additional victims
homs_db_additional <- shr_db_homs_for_JH1 %>%  filter(!shr_db_homs_for_JH1$offender_1_circumstance=='felon killed by private citizen' & !shr_db_homs_for_JH1$offender_1_circumstance=='felon killed by police' & shr_db_homs_for_JH1$additional_victim_count > 0)
# next we filter out the occurrences of CJH and PJH so long as there were additional offenders
homs_db_offender_additional <- shr_db_homs_for_JH1 %>%  filter(!shr_db_homs_for_JH1$offender_1_circumstance=='felon killed by private citizen' & !shr_db_homs_for_JH1$offender_1_circumstance=='felon killed by police' & shr_db_homs_for_JH1$additional_offender_count > 0)


#doing the counts of homicides
homs_db_ct <- homs_db %>%
  group_by(state, year) %>%
  tally()


homs_db_ct <- as.data.frame(homs_db_ct) #transform into dataframe

#cleaning and adding a variable that is used to join tables later on
homs_db_ct <- homs_db_ct %>% unite('year_ymo', year, state, remove = FALSE)
homs_db_additional <- homs_db_additional %>% unite('year_ymo', year, state, remove = FALSE)
homs_db_offender_additional <- homs_db_offender_additional %>% unite('year_ymo', year, state, remove = FALSE)
homs_db_additional <- subset(homs_db_additional, select = c(additional_victim_count, year_ymo))
homs_db_offender_additional <- subset(homs_db_offender_additional, select = c(additional_offender_count, year_ymo))

#below join tables
homs_db_ct <- left_join(homs_db_ct, homs_db_additional, by = "year_ymo")
homs_db_ct <- left_join(homs_db_ct, homs_db_offender_additional, by = "year_ymo")

#below we make perform the imputation of "0" for "NA", because they are not real NAs, 
#given that Kaplan's db is a table of occurrences and our table has all periods
homs_db_ct <- homs_db_ct %>%
  mutate(additional_offender_count = coalesce(additional_offender_count, 0),
         additional_victim_count = coalesce(additional_victim_count, 0)
  )

#below we count the total of offenders and victims
homs_db_ct$homs_total_victims <- (homs_db_ct$additional_victim_count + homs_db_ct$n)
homs_db_ct$homs_total_offenders <- (homs_db_ct$additional_offender_count + homs_db_ct$n)



#simply renaming the column that is used to join tables
homs_db_ct <- homs_db_ct %>% rename_with( ~"BREAKln", "year_ymo")

#removing all duplicates
homs_db_ct <- homs_db_ct %>% distinct(BREAKln, .keep_all = TRUE)

#renaming other variables
homs_db_ct <- homs_db_ct %>% rename_with( ~"homs_occurrence", "n")
homs_db_ct <- homs_db_ct %>% rename_with( ~"homs_additional_victim_count", "additional_victim_count")
homs_db_ct <- homs_db_ct %>% rename_with( ~"homs_additional_offender_count", "additional_offender_count")



################################
#########  total JH ############
################################
#
# in this section we filter kaplan's database for both CJH and PJH
#

#create a copy
shr_db_JH1 <- shr_db_JH

#filter for TJH
JH_db_new <- shr_db_JH1 %>%  filter(shr_db_JH1$offender_1_circumstance=='felon killed by private citizen' | shr_db_JH1$offender_1_circumstance=='felon killed by police')
JH_db_new_additional <- JH_db_new %>%  filter(JH_db_new$additional_victim_count > 0) #filter if there were additional victims
JH_db_new_offender_additional <- JH_db_new %>%  filter(JH_db_new$additional_offender_count > 0) #filter if there were additional offenders


#doing the counts of TJH
JH_db_new_ct <- JH_db_new %>%
  group_by(state, year) %>%
  tally()


JH_db_new_ct <- as.data.frame(JH_db_new_ct) #transform into dataframe

#cleaning and adding a variable that is used to join tables later on
JH_db_new_ct <- JH_db_new_ct %>% unite('year_ymo', year, state, remove = FALSE)
JH_db_new_additional <- JH_db_new_additional %>% unite('year_ymo', year, state, remove = FALSE)
JH_db_new_offender_additional <- JH_db_new_offender_additional %>% unite('year_ymo', year, state, remove = FALSE)
JH_db_new_additional <- subset(JH_db_new_additional, select = c(additional_victim_count, year_ymo))
JH_db_new_offender_additional <- subset(JH_db_new_offender_additional, select = c(additional_offender_count, year_ymo))

#below join tables
JH_db_new_ct <- left_join(JH_db_new_ct, JH_db_new_additional, by = "year_ymo")
JH_db_new_ct <- left_join(JH_db_new_ct, JH_db_new_offender_additional, by = "year_ymo")

#below we make perform the imputation of "0" for "NA", because they are not real NAs, 
#given that Kaplan's db is a table of occurrences and our table has all periods
JH_db_new_ct <- JH_db_new_ct %>%
  mutate(additional_offender_count = coalesce(additional_offender_count, 0),
         additional_victim_count = coalesce(additional_victim_count, 0)
  )

#below we count the total of offenders and victims
JH_db_new_ct$tot_JH_total_victims <- (JH_db_new_ct$additional_victim_count + JH_db_new_ct$n)
JH_db_new_ct$tot_JH_total_offenders <- (JH_db_new_ct$additional_offender_count + JH_db_new_ct$n)


#simply renaming the column that is used to join tables
JH_db_new_ct <- JH_db_new_ct %>% rename_with( ~"BREAKln", "year_ymo")

#renaming other variables
JH_db_new_ct <- JH_db_new_ct %>% rename_with( ~"tot_JH_occurrence", "n")
JH_db_new_ct <- JH_db_new_ct %>% rename_with( ~"tot_JH_additional_victim_count", "additional_victim_count")
JH_db_new_ct <- JH_db_new_ct %>% rename_with( ~"tot_JH_additional_offender_count", "additional_offender_count")





#now we add our old DB that consists of Ivans original table and Kaplans as well, with the ACS variables from CENSUS
JH_db <- read_excel('C:/Users/sarah/Desktop/lookinto/CEOE/JH_db_new_May.xlsx')

#vars are loaded as char so we transform them into doubles
JH_db$unemp <- as.double(JH_db$unemp)
JH_db$percentPoverty <- as.double(JH_db$percentPoverty)
JH_db$popstate <- as.double(JH_db$popstate)
JH_db$police <- as.double(JH_db$police)

#renaming vars
JH_db <- JH_db %>% rename_with( ~'unemp_rate', 'unemp')
JH_db <- JH_db %>% rename_with( ~'poverty_rate', 'percentPoverty')
JH_db <- JH_db %>% rename_with( ~'shall_issue', 'shalll')
JH_db <- JH_db %>% rename_with( ~'pop_20_39', 'ppx2039')

#calculate police rate per 100,000 population
JH_db$police_rate <- (JH_db$police / JH_db$popstate) * 100000

#make lower caps all characters in this column
JH_db$BREAKln <- tolower(JH_db$BREAKln)

#remove dups
JH_db_new_ct <- JH_db_new_ct %>% distinct(BREAKln, .keep_all = TRUE)
JH_db_new_pol_ct1 <- JH_db_new_pol_ct %>% distinct(BREAKln, .keep_all = TRUE)
JH_db_new_cit_ct1 <- JH_db_new_cit_ct %>% distinct(BREAKln, .keep_all = TRUE)

#remove vars for join
JH_db_new_ct <- subset(JH_db_new_ct, select = -c(state, year))
JH_db_new_pol_ct1 <- subset(JH_db_new_pol_ct1, select = -c(state, year))
JH_db_new_cit_ct1 <- subset(JH_db_new_cit_ct1, select = -c(state, year))


#join homs, CJH, and PJH tables
JH_db_new_ct1 <- left_join(homs_db_ct, JH_db_new_ct, by = "BREAKln")

JH_db_new_ct1 <- left_join(JH_db_new_ct1, JH_db_new_pol_ct1, by = "BREAKln")

JH_db_new_ct1 <- left_join(JH_db_new_ct1, JH_db_new_cit_ct1, by = "BREAKln")


#here we remove states that had missing  or incomplete data for that year
JH_db_new_ct1 <- JH_db_new_ct1 %>% 
  filter(!grepl('1999_alabama', BREAKln))
JH_db_new_ct1 <- JH_db_new_ct1 %>% 
  filter(!grepl('2012_alabama', BREAKln))
JH_db_new_ct1 <- JH_db_new_ct1 %>% 
  filter(!grepl('2013_alabama', BREAKln))
JH_db_new_ct1 <- JH_db_new_ct1 %>% 
  filter(!grepl('2014_alabama', BREAKln))
JH_db_new_ct1 <- JH_db_new_ct1 %>% 
  filter(!grepl('2015_alabama', BREAKln))
JH_db_new_ct1 <- JH_db_new_ct1 %>% 
  filter(!grepl('2016_alabama', BREAKln))
JH_db_new_ct1 <- JH_db_new_ct1 %>% 
  filter(!grepl('2017_alabama', BREAKln))
JH_db_new_ct1 <- JH_db_new_ct1 %>% 
  filter(!grepl('2018_alabama', BREAKln))
JH_db_new_ct1 <- JH_db_new_ct1 %>% 
  filter(!grepl('2019_alabama', BREAKln))
JH_db_new_ct1 <- JH_db_new_ct1 %>% 
  filter(!grepl('2020_alabama', BREAKln))
JH_db_new_ct1 <- JH_db_new_ct1 %>% 
  filter(!grepl('1996_florida', BREAKln))
JH_db_new_ct1 <- JH_db_new_ct1 %>% 
  filter(!grepl('2019_florida', BREAKln))
JH_db_new_ct1 <- JH_db_new_ct1 %>% 
  filter(!grepl('2020_florida', BREAKln))
JH_db_new_ct1 <- JH_db_new_ct1 %>% 
  filter(!grepl('1984_illinois', BREAKln))
JH_db_new_ct1 <- JH_db_new_ct1 %>% 
  filter(!grepl('1985_illinois', BREAKln))
JH_db_new_ct1 <- JH_db_new_ct1 %>% 
  filter(!grepl('1987_illinois', BREAKln))
JH_db_new_ct1 <- JH_db_new_ct1 %>% 
  filter(!grepl('1987_kentucky', BREAKln))
JH_db_new_ct1 <- JH_db_new_ct1 %>% 
  filter(!grepl('1994_kentucky', BREAKln))
JH_db_new_ct1 <- JH_db_new_ct1 %>% 
  filter(!grepl('1981_new mexico', BREAKln))
JH_db_new_ct1 <- JH_db_new_ct1 %>% 
  filter(!grepl('1987_kentucky', BREAKln))


#remove DC, remove virgin islands, guam
JH_db_new_ct1 <- JH_db_new_ct1 %>% 
  filter(!grepl('district of columbia', state))
JH_db_new_ct1 <- JH_db_new_ct1 %>% 
  filter(!grepl('virgin islands', state))
JH_db_new_ct1 <- JH_db_new_ct1 %>% 
  filter(!grepl('2012_guam', BREAKln))
JH_db_new_ct1 <- JH_db_new_ct1 %>% 
  filter(!grepl('2013_guam', BREAKln))
JH_db_new_ct1 <- JH_db_new_ct1 %>% 
  filter(!grepl('2014_guam', BREAKln))
JH_db_new_ct1 <- JH_db_new_ct1 %>% 
  filter(!grepl('2015_guam', BREAKln))
JH_db_new_ct1 <- JH_db_new_ct1 %>% 
  filter(!grepl('2016_guam', BREAKln))
JH_db_new_ct1 <- JH_db_new_ct1 %>% 
  filter(!grepl('2017_guam', BREAKln))


#below we make perform the imputation of "0" for "NA", because they are not real NAs, 
#given that Kaplan's db is a table of occurrences and our table has all periods
JH_db_new_ct1 <- JH_db_new_ct1 %>% 
  mutate(tot_JH_occurrence = coalesce(tot_JH_occurrence, 0), tot_JH_additional_victim_count = coalesce(tot_JH_additional_victim_count, 0),
         tot_JH_additional_offender_count = coalesce(tot_JH_additional_offender_count, 0), tot_JH_total_victims = coalesce(tot_JH_total_victims, 0),
         tot_JH_total_offenders = coalesce(tot_JH_total_offenders, 0),
         cit_JHs_occurrence = coalesce(cit_JHs_occurrence, 0), cit_additional_victim_count = coalesce(cit_additional_victim_count, 0), 
         cit_additional_offender_count = coalesce(cit_additional_offender_count, 0), cit_total_victims = coalesce(cit_total_victims, 0),
         cit_total_offenders = coalesce(cit_total_offenders, 0),
         pol_JHs_occurrence = coalesce(pol_JHs_occurrence, 0), pol_additional_victim_count = coalesce(pol_additional_victim_count, 0),
         pol_additional_offender_count = coalesce(pol_additional_offender_count, 0), pol_total_victims = coalesce(pol_total_victims, 0),
         pol_total_offenders = coalesce(pol_total_offenders, 0)
  )

#remove unnecessary vars
JH_db_new_ct1 <- subset(JH_db_new_ct1, select = -c(state, year))





#save a copy
#write.csv(JH_db_new_ct1, "C:/Users/sarah/Desktop/lookinto/CEOE/_official_tables/JH_June_dirty.csv", row.names=FALSE)


####
#now we clean the table
####

#keep only necessary vars
JH_db <- subset(JH_db, select = c(BREAKln, popstate, shall_issue, syg_law, unemp_rate, state, year, pop_20_39,
                                  poverty_rate, police, police_rate))

#finally we join with the old table
JH_db_June <- left_join(JH_db, JH_db_new_ct1, by = "BREAKln")


#reshuffle main vars
JH_db_June <- JH_db_June %>%
  relocate(year, .after = BREAKln)
JH_db_June <- JH_db_June %>%
  relocate(state, .after = BREAKln)




# here we get arrest data from FBI API Crime Explorer
# update 10/17/2024: they changed their API call and the layout of the information
# API requests below may no longer work

#we create a list of all states
States <- c('AL','AK','AZ','AR','CA','CO','CT','DE','FL','GA','HI','ID','IL','IN','IA','KS','KY','LA','ME','MD','MA','MI','MN','MS','MO','MT','NE','NV','NH','NJ','NM','NY','NC','ND','OH','OK','OR','PA','RI','SC','SD','TN','TX','UT','VT','VA','WA','WV','WI','WY')

#create arrest dataframe
Arrest_db_JH <- data.frame()

#for loop that calls FBI Crime Explorer API
for (i in 1:50) {
  randname <- fromJSON(paste0("https://api.usa.gov/crime/fbi/cde/arrest/state/"
                              , as.character(States[i])
                              , "/all?from=1976&to=2020&API_KEY=6kJ4gIRT29jihAED612EtwkhVreM3OREHRLDwQFJ"))
  randname$data$state = States[i] #log the name of the state
  Arrest_db_JH <- rbind(Arrest_db_JH, randname$data) #bind data each iteration
}

#sum rows
Arrest_db_JH <- Arrest_db_JH %>%
  mutate(arrests = rowSums(select(., where(is.numeric))))

#relocate var
Arrest_db_JH <- Arrest_db_JH %>% relocate(arrests, .after = data_year)

#rename vars
JH_db <- JH_db %>% rename_with( ~'unemp_rate', 'unemp')
Arrest_db_JH <- Arrest_db_JH %>% rename_with( ~'year','data_year')
Arrest_db_JH <- Arrest_db_JH %>% rename_with( ~"murder_arrests","Murder and Nonnegligent Manslaughter")

#we perform the following to make it easier to join tables
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="AL",'alabama',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="AK",'alaska',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="AZ",'arizona',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="AR",'arkansas',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="CA",'california',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="CO",'colorado',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="CT",'connecticut',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="DE",'delaware',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="FL",'florida',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="GA",'georgia',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="HI",'hawaii',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="ID",'idaho',state))

Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="IL",'illinois',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="IN",'indiana',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="IA",'iowa',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="KS",'kansas',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="KY",'kentucky',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="LA",'louisiana',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="ME",'maine',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="MD",'maryland',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="MA",'massachusetts',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="MI",'michigan',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="MN",'minnesota',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="MS",'mississippi',state))

Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="MO",'missouri',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="MT",'montana',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="NE",'nebraska',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="NV",'nevada',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="NH",'new hampshire',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="NJ",'new jersey',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="NM",'new mexico',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="NY",'new york',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="NC",'north carolina',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="ND",'north dakota',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="OH",'ohio',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="OK",'oklahoma',state))

Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="OR",'oregon',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="PA",'pennsylvania',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="RI",'rhode island',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="SC",'south carolina',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="SD",'south dakota',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="TN",'tennessee',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="TX",'texas',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="UT",'utah',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="VT",'vermont',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="VA",'virginia',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="WA",'washington',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="WV",'west virginia',state))

Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="WI",'wisconsin',state))
Arrest_db_JH <-Arrest_db_JH %>% mutate(state=ifelse(state=="WY",'wyoming',state))

#cleaning
Arrest_db_JH <- subset(Arrest_db_JH, select = c(year, arrests,murder_arrests,state))

Arrest_db_JH <- Arrest_db_JH %>% unite('BREAKln', year, state, remove = FALSE) #use this to join tables

#cleaning
Arrest_db_JH <- subset(Arrest_db_JH, select = -c(year, state))




#we add total of homicides with JH and have the total of homs and JH because JH is in fact a homicide as well
JH_db_June$homs_plus_JH <- JH_db_June$homs_total_victims + JH_db_June$tot_JH_total_victims

#calculate murder rate per 100,000 population
JH_db_June$murder_rate <- ifelse (is.na((JH_db_June$homs_plus_JH / JH_db_June$popstate) * 100000), NA, (JH_db_June$homs_plus_JH / JH_db_June$popstate) * 100000)

#rename and relocate several variables
JH_db_June <- JH_db_June %>% rename_with( ~"JH_cit", "cit_total_victims")
JH_db_June <- JH_db_June %>%
  relocate(JH_cit, .after = year)
JH_db_June <- JH_db_June %>% rename_with( ~"JH_pol", "pol_total_victims")
JH_db_June <- JH_db_June %>%
  relocate(JH_pol, .after = year)
JH_db_June <- JH_db_June %>% rename_with( ~"JH_tot", "tot_JH_total_victims")
JH_db_June <- JH_db_June %>%
  relocate(JH_tot, .after = year)
JH_db_June <- JH_db_June %>%
  relocate(murder_rate, .after = year)

#join arrests
JH_db_June <- left_join(JH_db_June, Arrest_db_JH, by = "BREAKln")

#relocate vars
JH_db_June <- JH_db_June %>%
  relocate(arrests, .after = year)
JH_db_June <- JH_db_June %>%
  relocate(murder_arrests, .after = year)
JH_db_June <- JH_db_June %>%
  relocate(homs_plus_JH, .after = year)

#calculate arrest rate per 100,000 population and do logs
JH_db_June$arrest_rate <- ifelse (is.na((JH_db_June$arrests / JH_db_June$popstate) * 100000), NA, (JH_db_June$arrests / JH_db_June$popstate) * 100000)
JH_db_June$log_murder_rate <- log(JH_db_June$murder_rate + 1)
JH_db_June$log_arrest_rate <- log(JH_db_June$arrest_rate + 1)
JH_db_June$log_popstate <- log(JH_db_June$popstate)
JH_db_June$log_police_rate <- log(JH_db_June$police_rate + 1)

#reshuffle
JH_db_June <- JH_db_June %>%
  relocate(arrest_rate, .after = year)
JH_db_June <- JH_db_June %>%
  relocate(log_murder_rate, .after = year)
JH_db_June <- JH_db_June %>%
  relocate(log_arrest_rate, .after = year)


#save copy of clean table with arrests
# write.csv(JH_db_June, "C:/Users/sarah/Desktop/lookinto/CEOE/_official_tables/JH_July_cleaner.csv", row.names=FALSE)


#load tables 
JH_db_July <- read_csv('C:/Users/sarah/Desktop/lookinto/CEOE/_official_tables/JH_July_cleaner.csv')


#######################
##
##
## code below added to retrieve var of black pop rate on 27/09/2024
##
##
########################

#below is done because we needed to retrieve the blackPOPrate var
JH_db_bPOP <- read_csv('C:/Users/sarah/Desktop/lookinto/CEOE/JH_db_old_nov.csv')

#make column lower caps
JH_db_bPOP$BREAKln <- tolower(JH_db_bPOP$BREAKln)

#now we clean it
JH_db_bPOP$percentBLACK <- as.double(JH_db_bPOP$percentBLACK)
JH_db_bPOP <- JH_db_bPOP %>% rename_with( ~'blackpop_rate', 'percentBLACK')
JH_db_bPOP <- subset(JH_db_bPOP, select = c(BREAKln, blackpop_rate))

#join these two old tables to retrieve black pop rate var
JH_db_addingBpop1 <- left_join(JH_db_July, JH_db_bPOP, by = "BREAKln")

#copy with new name
JH_db_Sept_0_for_NA <- JH_db_addingBpop1


#######################
##
##
## code above added to retrieve var of black pop rate on 27/09/2024
##
##
########################




######################################################################################################
######################################################################################################
######################################################################################################
######################################################################################################
######################################################################################################
################################                                            ##########################
################################    below we get descriptive statistics     ##########################
################################          and run FENB and ZINB             ##########################
################################                                            ##########################
######################################################################################################
######################################################################################################
######################################################################################################
######################################################################################################
######################################################################################################
######################################################################################################


#descriptive stats

#descriptive stats for CJH
Hmisc::describe(JH_db_Sept_0_for_NA$JH_cit)
stat.desc(JH_db_Sept_0_for_NA$JH_cit)
#percentage of zeroes for JH cit
sumCol <- JH_db_Sept_0_for_NA$JH_cit
sumCol <- as.data.frame(sumCol)

res <- colSums(sumCol[ , 1, drop = FALSE]==0, na.rm=TRUE)/nrow(sumCol)*100
res


#descriptive stats for PJH
Hmisc::describe(JH_db_Sept_0_for_NA$JH_pol)
stat.desc(JH_db_Sept_0_for_NA$JH_pol)
#percentage of zeroes for JH pol
sumCol <- JH_db_Sept_0_for_NA$JH_pol
sumCol <- as.data.frame(sumCol)

res <- colSums(sumCol[ , 1, drop = FALSE]==0, na.rm=TRUE)/nrow(sumCol)*100
res


#descriptive stats for TJH
Hmisc::describe(JH_db_Sept_0_for_NA$JH_tot)
stat.desc(JH_db_Sept_0_for_NA$JH_tot)
#percentage of zeroes for JH tot
sumCol <- JH_db_Sept_0_for_NA$JH_tot
sumCol <- as.data.frame(sumCol)

res <- colSums(sumCol[ , 1, drop = FALSE]==0, na.rm=TRUE)/nrow(sumCol)*100
res


#descriptive stats for black population rate
Hmisc::describe(JH_db_Sept_0_for_NA$blackpop_rate)
stat.desc(JH_db_Sept_0_for_NA$blackpop_rate)
#percentage of zeroes for black population rate
sumCol <- JH_db_Sept_0_for_NA$blackpop_rate
sumCol <- as.data.frame(sumCol)

res <- colSums(sumCol[ , 1, drop = FALSE]==0, na.rm=TRUE)/nrow(sumCol)*100
res


#descriptive stats for log of murder rate
Hmisc::describe(JH_db_Sept_0_for_NA$log_murder_rate)
stat.desc(JH_db_Sept_0_for_NA$log_murder_rate)
#percentage of zeroes for log of murder rate
sumCol <- JH_db_Sept_0_for_NA$log_murder_rate
sumCol <- as.data.frame(sumCol)

res <- colSums(sumCol[ , 1, drop = FALSE]==0, na.rm=TRUE)/nrow(sumCol)*100
res


#descriptive stats for population from 20 through 39 years
Hmisc::describe(JH_db_Sept_0_for_NA$pop_20_39)
stat.desc(JH_db_Sept_0_for_NA$pop_20_39)
#percentage of zeroes for population from 20 through 39 years
sumCol <- JH_db_Sept_0_for_NA$pop_20_39
sumCol <- as.data.frame(sumCol)

res <- colSums(sumCol[ , 1, drop = FALSE]==0, na.rm=TRUE)/nrow(sumCol)*100
res


#descriptive stats for log of state population
Hmisc::describe(JH_db_Sept_0_for_NA$log_popstate)
stat.desc(JH_db_Sept_0_for_NA$log_popstate)
#percentage of zeroes for log of state population
sumCol <- JH_db_Sept_0_for_NA$log_popstate
sumCol <- as.data.frame(sumCol)

res <- colSums(sumCol[ , 1, drop = FALSE]==0, na.rm=TRUE)/nrow(sumCol)*100
res


#descriptive stats for log of arrest rate
Hmisc::describe(JH_db_Sept_0_for_NA$log_arrest_rate)
stat.desc(JH_db_Sept_0_for_NA$log_arrest_rate)
#percentage of zeroes for log of arrest rate
sumCol <- JH_db_Sept_0_for_NA$log_arrest_rate
sumCol <- as.data.frame(sumCol)

res <- colSums(sumCol[ , 1, drop = FALSE]==0, na.rm=TRUE)/nrow(sumCol)*100
res


#descriptive stats for log of police rate
Hmisc::describe(JH_db_Sept_0_for_NA$log_police_rate)
stat.desc(JH_db_Sept_0_for_NA$log_police_rate)
#percentage of zeroes for log of police rate
sumCol <- JH_db_Sept_0_for_NA$log_police_rate
sumCol <- as.data.frame(sumCol)

res <- colSums(sumCol[ , 1, drop = FALSE]==0, na.rm=TRUE)/nrow(sumCol)*100
res


#descriptive stats for poverty rate
Hmisc::describe(JH_db_Sept_0_for_NA$poverty_rate)
stat.desc(JH_db_Sept_0_for_NA$poverty_rate)
#percentage of zeroes for poverty rate
sumCol <- JH_db_Sept_0_for_NA$poverty_rate
sumCol <- as.data.frame(sumCol)

res <- colSums(sumCol[ , 1, drop = FALSE]==0, na.rm=TRUE)/nrow(sumCol)*100
res


#descriptive stats for unemployment rate
Hmisc::describe(JH_db_Sept_0_for_NA$unemp_rate)
stat.desc(JH_db_Sept_0_for_NA$unemp_rate)
#percentage of zeroes for unemployment rate
sumCol <- JH_db_Sept_0_for_NA$unemp_rate
sumCol <- as.data.frame(sumCol)

res <- colSums(sumCol[ , 1, drop = FALSE]==0, na.rm=TRUE)/nrow(sumCol)*100
res


#descriptive stats for SYG LAW
Hmisc::describe(JH_db_Sept_0_for_NA$syg_law)
stat.desc(JH_db_Sept_0_for_NA$syg_law)
#percentage of zeroes for SYG LAW
sumCol <- JH_db_Sept_0_for_NA$syg_law
sumCol <- as.data.frame(sumCol)

res <- colSums(sumCol[ , 1, drop = FALSE]==0, na.rm=TRUE)/nrow(sumCol)*100
res


#descriptive stats for RTC LAW
Hmisc::describe(JH_db_final_September$shall_issue)
stat.desc(JH_db_final_September$shall_issue)
#percentage of zeroes for RTC LAW
sumCol <- JH_db_final_September$shall_issue
sumCol <- as.data.frame(sumCol)

res <- colSums(sumCol[ , 1, drop = FALSE]==0, na.rm=TRUE)/nrow(sumCol)*100
res



#here we create a correlation table
covariates <- subset(JH_db_Sept_0_for_NA, select = c(shall_issue, syg_law, unemp_rate, log_murder_rate, log_police_rate, log_arrest_rate, poverty_rate, popstate, blackpop_rate))

round(cor(covariates,  use = "complete.obs"),
      digits = 2 # rounded to 2 decimals
)






######################################################################################
#
#   BELOW WE FINALLY RUN FENB and ZINB tests
# # all specification tests below indicated fixed effects for this panel
#

#######################
#citizen model
model_cit <- JH_cit ~ shall_issue + syg_law + unemp_rate + log_murder_rate + log_police_rate + log_arrest_rate + poverty_rate + log_popstate + blackpop_rate
model_cit.fenegbin <- fenegbin(model_cit, data=JH_db_Sept_0_for_NA)
summary(model_cit.fenegbin)

#hausman test
fixed <- plm(model_cit, data=JH_db_Sept_0_for_NA, index=c("state", "year"), model="within")  #fixed model
random <- plm(model_cit, data=JH_db_Sept_0_for_NA, index=c("state", "year"), model="random")  #random model
phtest(fixed,random) #Hausman test
#hausman is significant, thus we use fe negbin

#bp test
plmtest(fixed, c("time"), type=("bp"))
plmtest(fixed, c("individual"), type=("bp"))


#citizen robustness check
model_cit_test <- JH_cit ~ shall_issue + syg_law + unemp_rate + log_murder_rate + log_police_rate + log_arrest_rate + poverty_rate + log_popstate + blackpop_rate + pop_20_39
model_cit_test.fenegbin <- fenegbin(model_cit_test, data=JH_db_Sept_0_for_NA)
summary(model_cit_test.fenegbin)


#######################
#police model
model_pol <- JH_pol ~ shall_issue + syg_law + unemp_rate + log_murder_rate + log_police_rate + log_arrest_rate + poverty_rate + log_popstate + blackpop_rate
model_pol.fenegbin <- fenegbin(model_pol, data=JH_db_Sept_0_for_NA)
summary(model_pol.fenegbin)

#hausman test
fixed <- plm(model_pol, data=JH_db_Sept_0_for_NA, index=c("state", "year"), model="within")  #fixed model
random <- plm(model_pol, data=JH_db_Sept_0_for_NA, index=c("state", "year"), model="random")  #random model
phtest(fixed,random) #Hausman test
#hausman is significant, thus we use fe negbin

#bp test
plmtest(fixed, c("time"), type=("bp"))
plmtest(fixed, c("individual"), type=("bp"))

#police robustness check
model_pol_test <- JH_pol ~ shall_issue + syg_law + unemp_rate + log_murder_rate + log_police_rate + log_arrest_rate + poverty_rate + log_popstate + blackpop_rate + pop_20_39
model_pol_test.fenegbin <- fenegbin(model_pol_test, data=JH_db_Sept_0_for_NA)
summary(model_pol_test.fenegbin)



#######################
#total model
model_tot <- JH_tot ~ shall_issue + syg_law + unemp_rate + log_murder_rate + log_police_rate + log_arrest_rate + poverty_rate + log_popstate + blackpop_rate
model_tot.fenegbin <- fenegbin(model_tot, data=JH_db_Sept_0_for_NA)
summary(model_tot.fenegbin)

#hausman test
fixed <- plm(model_tot, data=JH_db_Sept_0_for_NA, index=c("state", "year"), model="within")  #fixed model
random <- plm(model_tot, data=JH_db_Sept_0_for_NA, index=c("state", "year"), model="random")  #random model
phtest(fixed,random) #Hausman test
#hausman is significant, thus we use fe negbin

#bp test
plmtest(fixed, c("time"), type=("bp"))
plmtest(fixed, c("individual"), type=("bp"))


#total robustness check
model_tot_test <- JH_tot ~ shall_issue + syg_law + unemp_rate + log_murder_rate + log_police_rate + log_arrest_rate + poverty_rate + log_popstate + blackpop_rate + pop_20_39
model_tot_test.fenegbin <- fenegbin(model_tot_test, data=JH_db_Sept_0_for_NA)
summary(model_tot_test.fenegbin)















#zero inflated Neg Bin




#tot JH
inf_JH_tot <- zeroinfl(JH_tot ~ shall_issue + syg_law + unemp_rate + log_murder_rate + log_police_rate + log_arrest_rate + poverty_rate + log_popstate + blackpop_rate |
                         shall_issue + syg_law + unemp_rate + log_murder_rate + log_police_rate + log_arrest_rate + poverty_rate + log_popstate + blackpop_rate,
                       dist = 'negbin',
                       data = JH_db_Sept_0_for_NA)
summary(inf_JH_tot)

# Dispersion Statistic
inf_JH_tot.res <- resid(inf_JH_tot, type = "pearson")
N  <- nrow(JH_db_Sept_0_for_NA)
p  <- length(coef(inf_JH_tot)) + 1 # '+1' is due to theta
sum(inf_JH_tot.res^2) / (N - p)

## Exponentiated coefficients
expCoef <- exp(coef((inf_JH_tot)))
expCoef <- matrix(expCoef, ncol = 2)
rownames(expCoef) <- c("Intercept", "shall_issue","syg_law","unemp_rate","log_murder_rate","log_police_rate","log_arrest_rate","poverty_rate","log_popstate")
colnames(expCoef) <- c("Count_model","Zero_inflation_model")

round(expCoef,
      digits = 4 # rounded to 4 decimals
)


#cit JH
inf_JH_cit <- zeroinfl(JH_cit ~ shall_issue + syg_law + unemp_rate + log_murder_rate + log_police_rate + log_arrest_rate + poverty_rate + log_popstate + blackpop_rate |
                         shall_issue + syg_law + unemp_rate + log_murder_rate + log_police_rate + log_arrest_rate + poverty_rate + log_popstate + blackpop_rate,
                       dist = 'negbin',
                       data = JH_db_Sept_0_for_NA)
summary(inf_JH_cit)

# Dispersion Statistic
inf_JH_cit.res <- resid(inf_JH_cit, type = "pearson")
N  <- nrow(JH_db_Sept_0_for_NA)
p  <- length(coef(inf_JH_cit)) + 1 # '+1' is due to theta
sum(inf_JH_cit.res^2) / (N - p)


## Exponentiated coefficients
expCoef <- exp(coef((inf_JH_cit)))
expCoef <- matrix(expCoef, ncol = 2)
rownames(expCoef) <- c("Intercept", "shall_issue","syg_law","unemp_rate","log_murder_rate","log_police_rate","log_arrest_rate","poverty_rate","log_popstate")
colnames(expCoef) <- c("Count_model","Zero_inflation_model")

round(expCoef,
      digits = 4 # rounded to 4 decimals
)



#pol JH
inf_JH_pol <- zeroinfl(JH_pol ~ shall_issue + syg_law + unemp_rate + log_murder_rate + log_police_rate + log_arrest_rate + poverty_rate + log_popstate + blackpop_rate |
                         shall_issue + syg_law + unemp_rate + log_murder_rate + log_police_rate + log_arrest_rate + poverty_rate + log_popstate + blackpop_rate,
                       dist = 'negbin',
                       data = JH_db_Sept_0_for_NA)
summary(inf_JH_pol, digits = 3)

# Dispersion Statistic
inf_JH_pol.res <- resid(inf_JH_pol, type = "pearson")
N  <- nrow(JH_db_Sept_0_for_NA)
p  <- length(coef(inf_JH_pol)) + 1 # '+1' is due to theta
sum(inf_JH_pol.res^2) / (N - p)

## Exponentiated coefficients
expCoef <- exp(coef((inf_JH_pol)))
expCoef <- matrix(expCoef, ncol = 2)
rownames(expCoef) <- c("Intercept", "shall_issue","syg_law","unemp_rate","log_murder_rate","log_police_rate","log_arrest_rate","poverty_rate","log_popstate")
colnames(expCoef) <- c("Count_model","Zero_inflation_model")

round(expCoef,
      digits = 4 # rounded to 4 decimals
)

